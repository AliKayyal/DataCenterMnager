//// Created by Lian Gh on 03/12/2019.//#include "library1.h"#include "DataCenterManager.h"void *Init(){    DataCenterManager *DS;    try {        DS = new DataCenterManager();    } catch(std::bad_alloc& except){        return NULL;    }    return (void*)DS;}StatusType AddDataCenter(void *DS, int dataCenterID, int numOfServers){    if(DS== nullptr)        return INVALID_INPUT;    StatusType result;    try {        result = ((DataCenterManager *)DS)->AddDataCenter(dataCenterID,numOfServers);    } catch(std::bad_alloc&){        return ALLOCATION_ERROR;    }    return result;}StatusType RemoveDataCenter(void *DS, int dataCenterID){    if(DS== nullptr)        return INVALID_INPUT;    StatusType result;    try {        result = ((DataCenterManager*) DS)->RemoveDataCenter(dataCenterID);    } catch(std::bad_alloc&){        return ALLOCATION_ERROR;    }    return result;}StatusType RequestServer(void *DS, int dataCenterID, int serverID, int os, int *assignedID){    if(DS== nullptr)        return INVALID_INPUT;    StatusType result;    try {        result = ((DataCenterManager*) DS)->RequestServer(dataCenterID,serverID,os,assignedID);//check    } catch(std::bad_alloc&){        return ALLOCATION_ERROR;    }    return result;}StatusType FreeServer(void *DS, int dataCenterID, int serverID){    if(DS== nullptr)        return INVALID_INPUT;    StatusType result;    try {        result = ((DataCenterManager*) DS)->FreeServer(dataCenterID,serverID);    } catch(std::bad_alloc&){        return ALLOCATION_ERROR;    }    return result;}StatusType GetDataCentersByOS(void *DS, int os, int **dataCenters, int* numOfDataCenters){    if(DS== nullptr)        return INVALID_INPUT;    StatusType result;    try {        result = ((DataCenterManager*) DS)->GetDataCentersByOS(os,dataCenters,numOfDataCenters);    } catch(std::bad_alloc&){        return ALLOCATION_ERROR;    }    return result;}void Quit(void** DS){    if(!DS){        return;    }    DataCenterManager* ds=(*(DataCenterManager**)DS);    delete ds;    *DS=NULL;}